#!/usr/bin/env python
#Wave generator
#sine6
# Allows gain and duration to be set with an http GET request
# or with parameters e.g. 8-10 is gain factor 0.8 for 10 seconds 

import sys
import time
import cgi
import pigpio
import cgitb
cgitb.enable

pi = pigpio.pi()

G1=4
G2=24

param = sys.argv[1]

s = param.split('-')  #Usage http://localhost:8080/cgi-bin/sine5A?8-5   gain = 0.8 , duration = 5 seconds  NB separator was $
first = s[0]		  #gain
second = s[1]		  #Duration



sinewave = newsinewave = [50,150,300,400,500,400,300,150,50]    #sinewave shape factors

# gain sent on scale of 0 to 10
gain = float(first)
gain = gain/10.0

print("first = %s second = %s")%(first, second)			#print parameters received EW 12/3/16

# duration sent in seconds
duration = float(second)


#gain = input("Enter the gain factor required :- ")
#print("Gain = %s")%gain

for i in range(0, 9):
    newsinewave[i] = gain * sinewave[i]
#    print('%d = %s')%(i, newsinewave[i])

pi.set_mode(G1, pigpio.OUTPUT)
pi.set_mode(G2, pigpio.OUTPUT)

flash_500=[] # flash every 500 ms
flash_100=[] # flash every 100 ms

#                              ON     OFF  DELAY

#flash_500.append(pigpio.pulse(1<<G1, 0, 1500))    # trigger pulse
#flash_500.append(pigpio.pulse(0, 1<<G1, 10))

for i in range(0, 9):                 #positive half cycle
    width = newsinewave[i] + 550
 #   print('width = %s')%width
    offtime = 1100 - width
    flash_500.append(pigpio.pulse(1<<G1,0, width))
    flash_500.append(pigpio.pulse(0, 1<<G1, offtime))

for i in range(0, 9):                #negative half cycle
    offtime = newsinewave[i] + 550
 #   print ('offtime = %s')%offtime
    width = (1100 - offtime)
    flash_500.append(pigpio.pulse(1<<G1,0, width))
    flash_500.append(pigpio.pulse(0,1<<G1, offtime))

pi.wave_clear() # clear any existing waveforms

pi.wave_add_generic(flash_500) # 500 ms flashes
f500 = pi.wave_create() # create and save id

pi.wave_send_repeat(f500)
time.sleep(duration)

pi.wave_tx_stop() # stop waveform

pi.wave_clear() # clear all waveforms
